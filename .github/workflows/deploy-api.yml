name: Build & Deploy Motoscope API (GHCR)

on:
  push:
    branches: [ "main" ]
    paths:
      - "Motoscope/motoscope-api/**"
  workflow_dispatch: {}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      IMAGE_BASENAME: motoscope-api

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute lowercase owner
        id: names
        run: |
          owner_lc="$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')"
          echo "owner_lc=$owner_lc" >> "$GITHUB_OUTPUT"

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: ./Motoscope/motoscope-api
          file: ./Motoscope/motoscope-api/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ steps.names.outputs.owner_lc }}/${{ env.IMAGE_BASENAME }}:latest
            ghcr.io/${{ steps.names.outputs.owner_lc }}/${{ env.IMAGE_BASENAME }}:${{ github.sha }}

      - name: "SSH - ensure stack is up (pull image & compose up)"
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST_API }}
          username: ${{ secrets.SSH_USER_API }}     # deploy
          key: ${{ secrets.SSH_KEY_API }}           # private key for deploy
          port: ${{ secrets.SSH_PORT_API }}
          script: |
            set -euo pipefail
            owner_lc=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
            image="ghcr.io/${owner_lc}/${{ env.IMAGE_BASENAME }}:latest"
            # If your GHCR package is private, uncomment next line and add GHCR_PAT secret:
            # docker login ghcr.io -u "${owner_lc}" -p "${{ secrets.GHCR_PAT }}"
            docker pull "$image"
            cd /srv/motoscope-api/Motoscope/motoscope-api
            docker-compose -p motoscope-api up -d

      - name: "SSH - prepare server dirs"
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST_API }}
          username: ${{ secrets.SSH_USER_API }}
          key: ${{ secrets.SSH_KEY_API }}
          port: ${{ secrets.SSH_PORT_API }}
          script: |
            set -euo pipefail
            mkdir -p /srv/motoscope-api/Motoscope/motoscope-api/{migrations,seeds,ops}

      - name: "SCP - upload schema/migrations/seeds"
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST_API }}
          username: ${{ secrets.SSH_USER_API }}
          key: ${{ secrets.SSH_KEY_API }}
          port: ${{ secrets.SSH_PORT_API }}
          source: "Motoscope/motoscope-api/schema.sql,Motoscope/motoscope-api/migrations/*,Motoscope/motoscope-api/seeds/*"
          target: "/srv/motoscope-api/Motoscope/motoscope-api/"

      - name: "SSH - run DB migrations"
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST_API }}
          username: ${{ secrets.SSH_USER_API }}
          key: ${{ secrets.SSH_KEY_API }}
          port: ${{ secrets.SSH_PORT_API }}
          script: |
            set -euo pipefail
            cd /srv/motoscope-api/Motoscope/motoscope-api
            # ensure migrate.sh exists; create/update it from repo if you also track it there
            if [ ! -f ops/migrate.sh ]; then
              cat > ops/migrate.sh <<'EOF'
              #!/usr/bin/env bash
              set -euo pipefail
              PSQL='docker-compose exec -T db psql -U motoscope_api -d motoscope'
              TABLE_COUNT=$($PSQL -qtAc "SELECT count(*) FROM information_schema.tables WHERE table_schema='public';")
              if [ "$TABLE_COUNT" -eq 0 ]; then
                echo "[migrate] Bootstrapping from schema.sql..."; $PSQL < schema.sql
              fi
              $PSQL -c "CREATE TABLE IF NOT EXISTS schema_migrations (id SERIAL PRIMARY KEY, filename TEXT UNIQUE NOT NULL, checksum TEXT NOT NULL, applied_at TIMESTAMPTZ NOT NULL DEFAULT now());"
              apply_dir () {
                dir="$1"; [ -d "$dir" ] || return 0
                for f in $(ls "$dir"/*.sql 2>/dev/null | sort); do
                  [ -f "$f" ] || continue
                  base=$(basename "$f"); sum=$(sha256sum "$f" | awk '{print $1}')
                  exists=$($PSQL -qtAc "SELECT 1 FROM schema_migrations WHERE filename='${base}' AND checksum='${sum}' LIMIT 1;")
                  if [ "$exists" = "1" ]; then echo "[migrate] Skip ${base}"; continue; fi
                  echo "[migrate] Applying ${base}..."; $PSQL < "$f"
                  $PSQL -c "INSERT INTO schema_migrations(filename, checksum) VALUES ('${base}','${sum}')
                            ON CONFLICT (filename) DO UPDATE SET checksum=EXCLUDED.checksum, applied_at=now();"
                done
              }
              apply_dir "migrations"; apply_dir "seeds"; echo "[migrate] Done."
              EOF
                            chmod +x ops/migrate.sh
                          fi
                          ./ops/migrate.sh
                          
